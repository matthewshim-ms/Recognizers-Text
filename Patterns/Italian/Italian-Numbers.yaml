---
LangMarker: it
#Integer Regex
RoundNumberIntegerRegex: !simpleRegex
  def: (cento|mille|milione|miliardo|trilione)
ZeroToNineIntegerRegex: !simpleRegex
  def: (tre|sette|otto|quattro|cinque|zero|nove|uno|una|due|dui|sei)
AnIntRegex: !simpleRegex
  def: (un|uno|una)(?=\s)
TenToNineteenIntegerRegex: !simpleRegex
  def: (diciassette|tredici|quattordici|diciotto|diciannove|quindici|sedici|undici|dodici|dieci)
TensNumberIntegerRegex: !simpleRegex
  def: (settanta|venti|trenta|ottanta|novanta|quaranta|cinquanta|sessanta)
SeparaIntRegex: !nestedRegex
  def: ((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(e\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\s+{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\s+{RoundNumberIntegerRegex})+))
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, RoundNumberIntegerRegex, AnIntRegex ]
AllIntRegex: !nestedRegex
  def: (((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(e\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(and\s+)?)*{SeparaIntRegex})
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, SeparaIntRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!(\.\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s*(K|k|M|T|G)(?=\b)
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dozzina(e)?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((half\s+)?a\s+dozzina)|({AllIntRegex}\s+dozzina(e)?))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
RoundNumberOrdinalRegex: !simpleRegex
  def: (centesimo(a)|millesimo(a)|milionesimo(a)|miliardesimo(a)|trilionesimo(a))
BasicOrdinalRegex: !simpleRegex
  def: (primo(a)|secondo(a)|terzo(a)|quarto(a)|quinto(a)|sesto(a)|settimo(a)|ottavo(a)|nono(a)|decimo(a)|undicesimo(a)|dodicesimo(a)|tredicesimo(a)|quattordicesimo(a)|quindicesimo(a)|sedicesimo(a)|diciassettesimo(a)|diciottesimo(a)|diciannovesimo(a)|ventesimo(a)|trentesimo(a)|quarantesimo(a)|cinquantesimo(a)|sessantesimo(a)|settantesimo(a)|otantesimo(a)|novantesimo(a))
SuffixBasicOrdinalRegex: !nestedRegex
  def: ((((({TensNumberIntegerRegex}(\s+(e\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(e\s+)?)*({TensNumberIntegerRegex}(\s+|\s*-\s*))?{BasicOrdinalRegex})
  references: [ TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, BasicOrdinalRegex ]
SuffixRoundNumberOrdinalRegex: !nestedRegex
  def: (({AllIntRegex}\s+){RoundNumberOrdinalRegex})
  references: [ AllIntRegex, RoundNumberOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: ({SuffixBasicOrdinalRegex}|{SuffixRoundNumberOrdinalRegex})
  references: [ SuffixBasicOrdinalRegex, SuffixRoundNumberOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)((\d*(1°|2°|3°|4°|5°|6°|7°|8°|9°|0°))|(11°|12°))(?=\b)
OrdinalNumericRegex: !simpleRegex
  def: (?<=\b)(\d{1,3}(\s*,\s*\d{3})*\s*°)(?=\b)
OrdinalRoundNumberRegex: !nestedRegex
  def: (?<!(un|uno|una)\s+){RoundNumberOrdinalRegex}
  references: [ RoundNumberOrdinalRegex ]
OrdinalEnglishRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionNotationRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+[/]\d+(?=(\b[^/]|$))
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(e\s+)?)?({AllIntRegex})(\s+|\s*-\s*)((({AllOrdinalRegex})|({RoundNumberOrdinalRegex}))s|halves|quarters)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, RoundNumberOrdinalRegex ]
FractionNounWithArticleRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(e\s+)?)?(un|uno|una)(\s+|\s*-\s*)(({AllOrdinalRegex})|({RoundNumberOrdinalRegex})|mezzo|quarto)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, RoundNumberOrdinalRegex ]
FractionPrepositionRegex: !nestedRegex
  def: (?<=\b)(({AllIntRegex})|((?<!\.)\d+))\s+diviso\s+(({AllIntRegex})|(\d+)(?!\.))(?=\b)
  references: [ AllIntRegex ]
#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))
  references: [ ZeroToNineIntegerRegex, SeparaIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+point){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleWithMultiplierRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\.)))\d+\.\d+\s*(K|k|M|G|T|B|b)(?=\b)
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\.)))(\d+(\.\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\.)))(\d+(\.\d+)?)\^([+-]*[1-9]\d*)(?=\b)
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\.)))\d+\.\d+(?!(\.\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+))\.\d+(?!(\.\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\.)))\d+\.\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
#Number Regex
CurrencyRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*(B|b|m|t|g)(?=\b)
#Percentage Regex
NumberWithSuffixPercentage: !nestedRegex
  def: ({BaseNumbers.NumberReplaceToken})(\s*)(%|percento|per cento)
  references: [ BaseNumbers.NumberReplaceToken ]
NumberWithPrefixPercentage: !nestedRegex
  def: (percento di|per cento di)(\s*)({BaseNumbers.NumberReplaceToken})
  references: [ BaseNumbers.NumberReplaceToken ]
#Parser
DecimalSeparatorChar: !char ','
FractionMarkerToken: su
NonDecimalSeparatorChar: !char '.'
HalfADozenText: sei
WordSeparatorToken: e
WrittenDecimalSeparatorTexts: [punto]
WrittenGroupSeparatorTexts: [punto]
WrittenIntegerSeparatorTexts: [e]
WrittenFractionSeparatorTexts: [e]
HalfADozenRegex: !simpleRegex
  def: mezza\s+dozzina
DigitalNumberRegex: !simpleRegex
  def: ((?<=\b)(cento|mille|milione|miliardo|trilione|dozzina(e)?)(?=\b))|((?<=(\d|\b))(k|t|m|g|b)(?=\b))
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    un: 1
    una: 1
    uno: 1
    zero: 0
    uno: 1
    due: 2
    dui: 2
    tre: 3
    quattro: 4
    cinque: 5
    sei: 6
    sette: 7
    otto: 8
    nove: 9
    dieci: 10
    undici: 11
    dodici: 12
    dozzina: 12
    dozzine: 12
    tredici: 13
    quattordici: 14
    quiundici: 15
    sedici: 16
    diciassette: 17
    diciotto: 18
    diciannove: 19
    venti: 20
    trenta: 30
    quaranta: 40
    cinquanta: 50
    sessanta: 60
    settanta: 70
    ottanta: 80
    novanta: 90
    centinaio: 100
    cento: 100
    mille: 1000
    milione: 1000000
    miliardo: 1000000000
    trilioni di: 1000000000000
    trilioni: 1000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    primo: 1
    secondo: 2
    secondario: 2
    meta: 2
    metà: 2
    mezzo: 2
    terzo: 3
    terza: 3
    quarto: 4
    quinto: 5
    quinta: 5
    sesto: 6
    settimo: 7
    ottavo: 8
    nono: 9
    nona: 9
    decimo: 10
    undicesimo: 11
    dodicesimo: 12
    tredicesimo: 13
    quattordicesimo: 14
    quindicesimo: 15
    sedicesimo: 16
    diciassettesimo: 17
    diciottesimo: 18
    diciannovesimo: 19
    ventesimo: 20
    trentesimo: 30
    quarantesimo: 40
    cinquantesimo: 50
    sessantesimo: 60
    settantesimo: 70
    ottantesimo: 80
    novantesimo: 90
    centesimo: 100
    millesimo: 1000
    milionesimo: 1000000
    bilionesimo: 1000000000
    miliardesimo: 1000000000000
    primi: 1
    metà: 2
    meta: 2
    terzi: 3
    terzo: 3
    terza: 3
    quarti: 4
    quinti: 5
    sesti: 6
    settimi: 7
    ottavi: 8
    noni: 9
    nona: 9
    decimi: 10
    undicesimi: 11
    dodicesimi: 12
    tredicesime: 13
    quattordicesima: 14
    quindicesima: 15
    sedicesimi: 16
    sedicesima: 16
    diciassettesimi: 17
    diciassettesima: 17
    diciottesima: 18
    diciottesimi: 18
    diciannovesimi: 19
    diciannovesima: 19
    ventesima: 20
    ventesimi: 20
    trentesima: 30
    trentesimi: 30
    quarantesima: 40
    quarantesimi: 40
    cinquantesima: 50
    cinquantesimi: 50
    sessantesima: 60
    sessantesimi: 60
    settantesima: 70
    settantesimi: 70
    ottantesima: 80
    ottantesimi: 80
    novantesimi: 90
    novantesima: 90
    centesima: 100
    millesima: 1000
    millesimi: 1000
    milionesima: 1000000
    milionesimi: 1000000
    bilionesima: 1000000000
    bilionesimi: 1000000000
    miliardesimi: 1000000000000
    miliardesima: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    centinaio: 100
    cento: 100
    mille: 1000
    milione: 1000000
    miliardo: 1000000000
    bilione: 1000000000
    trilioni di: 1000000000000
    trilioni: 1000000000000
    centesimo: 100
    centesima: 100
    millesimo: 1000
    millesima: 1000
    milionesimo: 1000000
    milionesima: 1000000
    bilionesimo: 1000000000
    miliardesimo: 1000000000000
    centesimo: 100
    thousandths: 1000
    millionths: 1000000
    billionths: 1000000000
    trillionths: 1000000000000
    dozzina: 12
    dozzine: 12
    decine: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
...