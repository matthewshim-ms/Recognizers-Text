---
LangMarker: IT
#Integer Regex
HundredsNumberIntegerRegex: !simpleRegex
  def: (trecento|quattrocento|seicento|settecento|ottocento|novecento|duecento|cinquecento)
RoundNumberIntegerRegex: !simpleRegex
  def: (mille|milion[ie]|miliard[io]|trilione|cento)(\s*di)?
ZeroToNineIntegerRegex: !simpleRegex
  def: (tre|sette|otto|quattro|cinque|zero|nove|due|dui|sei|un[ao]?)
TenToNineteenIntegerRegex: !simpleRegex
  def: (diciassette|tredici|quattordici|diciotto|diciannove|quindici|sedici|undici|dodici|dieci)
TwentiesIntegerRegex: !simpleRegex
  def: (ventiquattro|venticinque|ventisei|ventisette|ventotto|ventinove|ventitr[eè]|ventidu[ie]|ventiuno|ventuno|venti)
TensNumberIntegerRegex: !simpleRegex
  def: (settanta|venti|trenta|ottanta|novanta|quaranta|cinquanta|sessanta)
DigitsNumberRegex: !simpleRegex
  def: \d|\d{1,3}(\.\d{3})
BelowHundredsRegex: !nestedRegex
  def: (({TenToNineteenIntegerRegex}|{TwentiesIntegerRegex}|((\s+y\s+)?{TensNumberIntegerRegex}(\s+e\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex}|(\s+{ZeroToNineIntegerRegex}))
  references: [ TenToNineteenIntegerRegex, TwentiesIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex ]
BelowThousandsRegex: !nestedRegex
  def: ({HundredsNumberIntegerRegex}(\s+{BelowHundredsRegex})?|{BelowHundredsRegex})
  references: [ HundredsNumberIntegerRegex, BelowHundredsRegex ]
SupportThousandsRegex: !nestedRegex
  def: (({BelowThousandsRegex}|{BelowHundredsRegex})\s+{RoundNumberIntegerRegex}(\s+{RoundNumberIntegerRegex})?)
  references: [ BelowThousandsRegex, BelowHundredsRegex, RoundNumberIntegerRegex ]
SeparaIntRegex: !nestedRegex
  def: ({SupportThousandsRegex}(\s+{SupportThousandsRegex})*(\s+{BelowThousandsRegex})?|{BelowThousandsRegex})
  references: [ SupportThousandsRegex, BelowThousandsRegex ]
AllIntRegex: !nestedRegex
  def: ({SeparaIntRegex}|mille(\s+{BelowThousandsRegex})?)
  references: [ SeparaIntRegex, BelowThousandsRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+(?!(,\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*(k|M|T|G)(?=\b)
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)({DigitsNumberRegex})+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ DigitsNumberRegex, RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dozzina(e)?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((mezzo\s+)?\s+dozzina)|({AllIntRegex}\s+(e|con)\s+)?({AllIntRegex}\s+dozinna(s)?)|({AllIntRegex}\s+dozinna di?))(?=\b)
  references: [ AllIntRegex ]

#Ordinal Regex
SimpleRoundOrdinalRegex: !simpleRegex
  def: (millesimo|milionesimo|bilionesim[ao]|trilionesimo)
OneToNineOrdinalRegex: !simpleRegex
  def: (primo|secondo|terz[oai]|quart[oai]|quint[oai]|sest[oai]|settim[oai]|ottav[ao]|non[ao])
TensOrdinalRegex: !simpleRegex
  def: (diciannovesimo|diciottesimo|diciassettesimo|sedicesimo|quindicesimo|quattordicesimo|tredicesimo|ventesimo|decimo)
HundredOrdinalRegex: !simpleRegex
  def: (centesimo|duecentesimo|trecentesimo|quattrocentesimo|cinquecentesimo|seicentesimo|settecentesimo|ottocentesimo|novecentesimo)
SpecialUnderHundredOrdinalRegex: !simpleRegex
  def: (undicesimo|dodicesimo)
UnderHundredOrdinalRegex: !nestedRegex
  def: ((({TensOrdinalRegex}(\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex}|{SpecialUnderHundredOrdinalRegex})
  references: [ TensOrdinalRegex, OneToNineOrdinalRegex, SpecialUnderHundredOrdinalRegex ]
UnderThousandOrdinalRegex: !nestedRegex
  def: ((({HundredOrdinalRegex}(\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})
  references: [ HundredOrdinalRegex, UnderHundredOrdinalRegex ]
OverThousandOrdinalRegex: !nestedRegex
  def: (({AllIntRegex})(esimo))
  references: [ AllIntRegex ]
ComplexOrdinalRegex: !nestedRegex
  def: (({OverThousandOrdinalRegex}(\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})
  references: [ OverThousandOrdinalRegex, UnderThousandOrdinalRegex ]
SufixRoundOrdinalRegex: !nestedRegex
  def: (({AllIntRegex}(\s)?)({SimpleRoundOrdinalRegex}))
  references: [ AllIntRegex, SimpleRoundOrdinalRegex ]
ComplexRoundOrdinalRegex: !nestedRegex
  def: ((({SufixRoundOrdinalRegex}(\s)?)?{ComplexOrdinalRegex})|{SufixRoundOrdinalRegex})
  references: [ SufixRoundOrdinalRegex, ComplexOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: '{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}'
  references: [ ComplexOrdinalRegex, SimpleRoundOrdinalRegex, ComplexRoundOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)((\d*(1°|2°|3°|4°|5°|6°|7°|8°|9°|0°))|(11°|12°))(?=\b)
OrdinalNounRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]

#Fraction Regex
SpecialFractionInteger: !nestedRegex
  def: ((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex})))
  references: [ AllIntRegex, ZeroToNineIntegerRegex ]
FractionNotationRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+[/]\d+(?=(\b[^/]|$))
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionNotationRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+[/]\d+(?=(\b[^/]|$))
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+((e|con)\s+)?)?({AllIntRegex})(\s+((e|con)\s)?)((({AllOrdinalRegex})s?|({SpecialFractionInteger})|({SufixRoundOrdinalRegex})s?)|medi[oa]s?|tercios?)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, SpecialFractionInteger, SufixRoundOrdinalRegex ]
FractionNounWithArticleRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(e\s+)?)?(un|un[oa])(\s+)(({AllOrdinalRegex})|({SufixRoundOrdinalRegex})|(e\s+)?mezzo?)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, SufixRoundOrdinalRegex ]
FractionPrepositionRegex: !nestedRegex
  def: (?<=\b)(({AllIntRegex})|((?<!\.)\d+))\s+diviso\s+(({AllIntRegex})|((\d+)(?!\.)))(?=\b)
  references: [ AllIntRegex ]

#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))
  references: [ ZeroToNineIntegerRegex, SeparaIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+punto|coma|con|e){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleWithMultiplierRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s*(K|k|M|G|T)(?=\b)
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)\^([+-]*[1-9]\d*)(?=\b)
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))\d+,\d+(?!(,\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+)),\d+(?!(,\d+))(?={placeholder})
  params: [ placeholder ]

DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]


#Number Regex
CurrencyRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*(B|b|m|t|g)(?=\b)

#Percentage Regex
NumberWithSuffixPercentage: !nestedRegex
  def: ({BaseNumbers.NumberReplaceToken})(\s*)(%|percento|per cento)
  references: [ BaseNumbers.NumberReplaceToken ]
NumberWithPrefixPercentage: !nestedRegex
  def: (percento di)(\s*)({BaseNumbers.NumberReplaceToken})
  references: [ BaseNumbers.NumberReplaceToken ]

#Parser
DecimalSeparatorChar: !char ','
FractionMarkerToken: diviso
NonDecimalSeparatorChar: !char '.'
HalfADozenText: sei
WordSeparatorToken: e
WrittenDecimalSeparatorTexts: [punto]
WrittenGroupSeparatorTexts: [punto]
WrittenIntegerSeparatorTexts: [e]
WrittenFractionSeparatorTexts: [con]
HalfADozenRegex: !simpleRegex
  def: mezzo\s+dozzina
DigitalNumberRegex: !simpleRegex
  def: ((?<=\b)(mille|milion[ie]|miliardo|trilione|dozzina|cento)(?=\b))|((?<=(\d|\b))(k|t|m|g|b)(?=\b))
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    un: 1
    una: 1
    uno: 1
    zero: 0
    uno: 1
    due: 2
    dui: 2
    tre: 3
    quattro: 4
    cinque: 5
    sei: 6
    sette: 7
    otto: 8
    nove: 9
    dieci: 10
    undici: 11
    dodici: 12
    dozzina: 12
    dozzine: 12
    dozinna di: 12
    tredici: 13
    quattordici: 14
    quiundici: 15
    sedici: 16
    diciassette: 17
    diciotto: 18
    diciannove: 19
    venti: 20
    ventun: 21
    ventuno: 21
    ventidui: 22
    ventidue: 22
    ventitre: 23
    ventitrè : 23
    ventiquattro: 24
    venticinque: 25
    ventisei: 26
    ventisette: 27
    ventotto: 28
    ventinove: 29
    trenta: 30
    quaranta: 40
    cinquanta: 50
    sessanta: 60
    settanta: 70
    ottanta: 80
    novanta: 90
    centinaio: 100
    duecento: 200
    trecento: 300
    quattrocento: 400
    cinquecento: 500
    seicento: 600
    settecento: 700
    cento: 100
    mille: 1000
    milione: 1000000
    milioni: 1000000
    miliardo: 1000000000
    miliardi: 1000000000
    trilioni di: 1000000000000
    trilioni: 1000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    primo: 1
    secondo: 2
    secondario: 2
    meta: 2
    metà: 2
    mezzo: 2
    terzo: 3
    terza: 3
    quarto: 4
    trimestre: 4
    quinto: 5
    quinta: 5
    sesto: 6
    settimo: 7
    settesimo: 7
    ottavo: 8
    nono: 9
    nona: 9
    decimo: 10
    undicesimo: 11
    dodicesimo: 12
    tredicesimo: 13
    quattordicesimo: 14
    quindicesimo: 15
    sedicesimo: 16
    diciassettesimo: 17
    diciottesimo: 18
    diciannovesimo: 19
    ventesimo: 20
    trentesimo: 30
    quarantesimo: 40
    cinquantesimo: 50
    sessantesimo: 60
    settantesimo: 70
    ottantesimo: 80
    novantesimo: 90
    centesimo: 100
    duecentisimo: 200
    trecentisimo: 300
    quattrocentesimo: 400
    cinquecentesimo: 500
    seicentesimo: 600
    settecentesimo: 700
    ottocentesimo: 800
    novecentesimo: 900
    millesimo: 1000
    milionesimo: 1000000
    bilionesimo: 1000000000
    miliardesimo: 1000000000000
    primi: 1
    metà: 2
    meta: 2
    terzi: 3
    terzo: 3
    terza: 3
    quarti: 4
    quinti: 5
    sesti: 6
    settimi: 7
    ottavi: 8
    noni: 9
    nona: 9
    decimi: 10
    undicesimi: 11
    dodicesimi: 12
    tredicesime: 13
    quattordicesima: 14
    quindicesima: 15
    sedicesimi: 16
    sedicesima: 16
    diciassettesimi: 17
    diciassettesima: 17
    diciottesima: 18
    diciottesimi: 18
    diciannovesimi: 19
    diciannovesima: 19
    ventesima: 20
    ventesimi: 20
    trentesima: 30
    trentesimi: 30
    quarantesima: 40
    quarantesimi: 40
    cinquantesima: 50
    cinquantesimi: 50
    sessantesima: 60
    sessantesimi: 60
    settantesima: 70
    settantesimi: 70
    ottantesima: 80
    ottantesimi: 80
    novantesimi: 90
    novantesima: 90
    centesima: 100
    millesima: 1000
    millesimi: 1000
    milionesima: 1000000
    milionesimi: 1000000
    bilionesima: 1000000000
    bilionesimi: 1000000000
    miliardesimi: 1000000000000
    miliardesima: 1000000000000
PrefixCardinalDictionary: !dictionary
  types: [ string, long ]
  entries:
    due: 2 
    tre: 3 
    quattro: 4 
    cinque: 5 
    sei: 6 
    sette: 7 
    otto: 8 
    nove: 9 
    dieci: 10 
    undici: 11 
    dodici: 12 
    tredici: 13
    quattordici: 14
    quince: 15
    sedici: 16
    dieciséis: 16
    diciassette: 17
    diciotto: 18
    diciannove: 19
    venti: 20
    ventino: 21 
    ventidue: 22 
    ventitre: 23
    ventitré: 23
    ventiquattro: 24 
    venticinque: 25 
    ventisei: 26 
    ventisette: 27 
    ventotto: 28 
    ventinove: 29 
    trenta: 30
    quaranta: 40
    cinquanta: 50
    sessanta: 60
    settanta: 70
    ottanta: 80
    novanta: 90
    cento: 100 
    deucento: 200
    trecento: 300
    quattrocento: 400
    cinquecento: 500
    seicento: 600
    settecento: 700
    ottocento: 800
    novecento: 900
SufixOrdinalDictionary: !dictionary
  types: [ string, long ]
  entries:
    millesimo: 1000 
    milionesimo: 1000000 
    bilionesimo: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    cento: 100
    centinaio: 100
    mille: 1000
    milione: 1000000
    milioni: 1000000
    miliardo: 1000000000
    miliardi: 1000000000
    bilione: 1000000000
    trilioni di: 1000000000000
    trilioni: 1000000000000
    centesimo: 100
    centesima: 100
    millesimo: 1000
    millesima: 1000
    milionesimo: 1000000
    milionesima: 1000000
    bilionesimo: 1000000000
    miliardesimo: 1000000000000
    centesimo: 100
    thousandths: 1000
    millionths: 1000000
    billionths: 1000000000
    trillionths: 1000000000000
    dozzina: 12
    dozzine: 12
    dozzina di: 12
    decine: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
...