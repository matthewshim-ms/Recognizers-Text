//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     Generation parameters:
//     - DataFilename: Patterns\Italian\Italian-Numbers.yaml
//     - Language: Italian
//     - ClassName: NumbersDefinitions
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Recognizers.Definitions.Italian
{
	using System;
	using System.Collections.Generic;

	public static class NumbersDefinitions
	{
		public const string LangMarker = "IT";
		public const string HundredsNumberIntegerRegex = @"(trecento|quattrocento|seicento|settecento|ottocento|novecento|duecento|cinquecento)";
		public const string RoundNumberIntegerRegex = @"(mille|milion[ie]|miliard[io]|trilione|cento)(\s*di)?";
		public const string ZeroToNineIntegerRegex = @"(tre|sette|otto|quattro|cinque|zero|nove|due|dui|sei|un[ao]?)";
		public const string TenToNineteenIntegerRegex = @"(diciassette|tredici|quattordici|diciotto|diciannove|quindici|sedici|undici|dodici|dieci)";
		public const string TwentiesIntegerRegex = @"(ventiquattro|venticinque|ventisei|ventisette|ventotto|ventinove|ventitr[eè]|ventidu[ie]|ventiuno|ventuno|venti)";
		public const string TensNumberIntegerRegex = @"(settanta|venti|trenta|ottanta|novanta|quaranta|cinquanta|sessanta)";
		public const string DigitsNumberRegex = @"\d|\d{1,3}(\.\d{3})";
		public static readonly string BelowHundredsRegex = $@"(({TenToNineteenIntegerRegex}|{TwentiesIntegerRegex}|((\s+y\s+)?{TensNumberIntegerRegex}(\s+e\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex}|(\s+{ZeroToNineIntegerRegex}))";
		public static readonly string BelowThousandsRegex = $@"({HundredsNumberIntegerRegex}(\s+{BelowHundredsRegex})?|{BelowHundredsRegex})";
		public static readonly string SupportThousandsRegex = $@"(({BelowThousandsRegex}|{BelowHundredsRegex})\s+{RoundNumberIntegerRegex}(\s+{RoundNumberIntegerRegex})?)";
		public static readonly string SeparaIntRegex = $@"({SupportThousandsRegex}(\s+{SupportThousandsRegex})*(\s+{BelowThousandsRegex})?|{BelowThousandsRegex})";
		public static readonly string AllIntRegex = $@"({SeparaIntRegex}|mille(\s+{BelowThousandsRegex})?)";
		public const string PlaceHolderPureNumber = @"\b";
		public const string PlaceHolderDefault = @"\D|\b";
		public static readonly Func<string, string> NumbersWithPlaceHolder = (placeholder) => $@"(((?<=\W|^)-\s*)|(?<=\b))\d+(?!(,\d+[a-zA-Z]))(?={placeholder})";
		public const string NumbersWithSuffix = @"(((?<=\W|^)-\s*)|(?<=\b))\d+\s*(k|M|T|G)(?=\b)";
		public static readonly string RoundNumberIntegerRegexWithLocks = $@"(?<=\b)({DigitsNumberRegex})+\s+{RoundNumberIntegerRegex}(?=\b)";
		public const string NumbersWithDozenSuffix = @"(((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dozzina(e)?(?=\b)";
		public static readonly string AllIntRegexWithLocks = $@"((?<=\b){AllIntRegex}(?=\b))";
		public static readonly string AllIntRegexWithDozenSuffixLocks = $@"(?<=\b)(((mezzo\s+)?\s+dozzina)|({AllIntRegex}\s+(e|con)\s+)?({AllIntRegex}\s+dozinna(s)?)|({AllIntRegex}\s+dozinna di?))(?=\b)";
		public const string SimpleRoundOrdinalRegex = @"(millesimo|milionesimo|bilionesim[ao]|trilionesimo)";
		public const string OneToNineOrdinalRegex = @"(primo|secondo|terz[oai]|quart[oai]|quint[oai]|sest[oai]|settim[oai]|ottav[ao]|non[ao])";
		public const string TensOrdinalRegex = @"(diciannovesimo|diciottesimo|diciassettesimo|sedicesimo|quindicesimo|quattordicesimo|tredicesimo|ventesimo|decimo)";
		public const string HundredOrdinalRegex = @"(centesimo|duecentesimo|trecentesimo|quattrocentesimo|cinquecentesimo|seicentesimo|settecentesimo|ottocentesimo|novecentesimo)";
		public const string SpecialUnderHundredOrdinalRegex = @"(undicesimo|dodicesimo)";
		public static readonly string UnderHundredOrdinalRegex = $@"((({TensOrdinalRegex}(\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex}|{SpecialUnderHundredOrdinalRegex})";
		public static readonly string UnderThousandOrdinalRegex = $@"((({HundredOrdinalRegex}(\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})";
		public static readonly string OverThousandOrdinalRegex = $@"(({AllIntRegex})(esimo))";
		public static readonly string ComplexOrdinalRegex = $@"(({OverThousandOrdinalRegex}(\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})";
		public static readonly string SufixRoundOrdinalRegex = $@"(({AllIntRegex}(\s)?)({SimpleRoundOrdinalRegex}))";
		public static readonly string ComplexRoundOrdinalRegex = $@"((({SufixRoundOrdinalRegex}(\s)?)?{ComplexOrdinalRegex})|{SufixRoundOrdinalRegex})";
		public static readonly string AllOrdinalRegex = $@"{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}";
		public const string OrdinalSuffixRegex = @"(?<=\b)((\d*(1°|2°|3°|4°|5°|6°|7°|8°|9°|0°))|(11°|12°))(?=\b)";
		public static readonly string OrdinalNounRegex = $@"(?<=\b){AllOrdinalRegex}(?=\b)";
		public static readonly string SpecialFractionInteger = $@"((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex})))";
		public const string FractionNotationRegex = @"(((?<=\W|^)-\s*)|(?<=\b))\d+[/]\d+(?=(\b[^/]|$))";
		public const string FractionNotationWithSpacesRegex = @"(((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))";
		public static readonly string FractionNounRegex = $@"(?<=\b)({AllIntRegex}\s+((e|con)\s+)?)?({AllIntRegex})(\s+((e|con)\s)?)((({AllOrdinalRegex})s?|({SpecialFractionInteger})|({SufixRoundOrdinalRegex})s?)|medi[oa]s?|tercios?)(?=\b)";
		public static readonly string FractionNounWithArticleRegex = $@"(?<=\b)({AllIntRegex}\s+(e\s+)?)?(un|un[oa])(\s+)(({AllOrdinalRegex})|({SufixRoundOrdinalRegex})|(e\s+)?mezzo?)(?=\b)";
		public static readonly string FractionPrepositionRegex = $@"(?<=\b)(({AllIntRegex})|((?<!\.)\d+))\s+diviso\s+(({AllIntRegex})|((\d+)(?!\.)))(?=\b)";
		public static readonly string AllPointRegex = $@"((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))";
		public static readonly string AllFloatRegex = $@"{AllIntRegex}(\s+punto|coma|con|e){AllPointRegex}";
		public const string DoubleWithMultiplierRegex = @"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s*(K|k|M|G|T)(?=\b)";
		public const string DoubleExponentialNotationRegex = @"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)e([+-]*[1-9]\d*)(?=\b)";
		public const string DoubleCaretExponentialNotationRegex = @"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)\^([+-]*[1-9]\d*)(?=\b)";
		public static readonly Func<string, string> DoubleDecimalPointRegex = (placeholder) => $@"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))\d+,\d+(?!(,\d+))(?={placeholder})";
		public static readonly Func<string, string> DoubleWithoutIntegralRegex = (placeholder) => $@"(?<=\s|^)(?<!(\d+)),\d+(?!(,\d+))(?={placeholder})";
		public static readonly string DoubleWithRoundNumber = $@"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s+{RoundNumberIntegerRegex}(?=\b)";
		public static readonly string DoubleAllFloatRegex = $@"((?<=\b){AllFloatRegex}(?=\b))";
		public const string CurrencyRegex = @"(((?<=\W|^)-\s*)|(?<=\b))\d+\s*(B|b|m|t|g)(?=\b)";
		public static readonly string NumberWithSuffixPercentage = $@"({BaseNumbers.NumberReplaceToken})(\s*)(%|percento|per cento)";
		public static readonly string NumberWithPrefixPercentage = $@"(percento di)(\s*)({BaseNumbers.NumberReplaceToken})";
		public const char DecimalSeparatorChar = ',';
		public const string FractionMarkerToken = "diviso";
		public const char NonDecimalSeparatorChar = '.';
		public const string HalfADozenText = "sei";
		public const string WordSeparatorToken = "e";
		public static readonly string[] WrittenDecimalSeparatorTexts = { "punto" };
		public static readonly string[] WrittenGroupSeparatorTexts = { "punto" };
		public static readonly string[] WrittenIntegerSeparatorTexts = { "e" };
		public static readonly string[] WrittenFractionSeparatorTexts = { "con" };
		public const string HalfADozenRegex = @"mezzo\s+dozzina";
		public const string DigitalNumberRegex = @"((?<=\b)(mille|milion[ie]|miliardo|trilione|dozzina|cento)(?=\b))|((?<=(\d|\b))(k|t|m|g|b)(?=\b))";
		public static readonly Dictionary<string, long> CardinalNumberMap = new Dictionary<string, long>
		{
			{ "un", 1 },
			{ "una", 1 },
			{ "uno", 1 },
			{ "zero", 0 },
			{ "due", 2 },
			{ "dui", 2 },
			{ "tre", 3 },
			{ "quattro", 4 },
			{ "cinque", 5 },
			{ "sei", 6 },
			{ "sette", 7 },
			{ "otto", 8 },
			{ "nove", 9 },
			{ "dieci", 10 },
			{ "undici", 11 },
			{ "dodici", 12 },
			{ "dozzina", 12 },
			{ "dozzine", 12 },
			{ "dozinna di", 12 },
			{ "tredici", 13 },
			{ "quattordici", 14 },
			{ "quiundici", 15 },
			{ "sedici", 16 },
			{ "diciassette", 17 },
			{ "diciotto", 18 },
			{ "diciannove", 19 },
			{ "venti", 20 },
			{ "ventun", 21 },
			{ "ventuno", 21 },
			{ "ventidui", 22 },
			{ "ventidue", 22 },
			{ "ventitre", 23 },
			{ "ventitrè", 23 },
			{ "ventiquattro", 24 },
			{ "venticinque", 25 },
			{ "ventisei", 26 },
			{ "ventisette", 27 },
			{ "ventotto", 28 },
			{ "ventinove", 29 },
			{ "trenta", 30 },
			{ "quaranta", 40 },
			{ "cinquanta", 50 },
			{ "sessanta", 60 },
			{ "settanta", 70 },
			{ "ottanta", 80 },
			{ "novanta", 90 },
			{ "centinaio", 100 },
			{ "duecento", 200 },
			{ "trecento", 300 },
			{ "quattrocento", 400 },
			{ "cinquecento", 500 },
			{ "seicento", 600 },
			{ "settecento", 700 },
			{ "cento", 100 },
			{ "mille", 1000 },
			{ "milione", 1000000 },
			{ "milioni", 1000000 },
			{ "miliardo", 1000000000 },
			{ "miliardi", 1000000000 },
			{ "trilioni di", 1000000000000 },
			{ "trilioni", 1000000000000 }
		};
		public static readonly Dictionary<string, long> OrdinalNumberMap = new Dictionary<string, long>
		{
			{ "primo", 1 },
			{ "secondo", 2 },
			{ "secondario", 2 },
			{ "meta", 2 },
			{ "metà", 2 },
			{ "mezzo", 2 },
			{ "terzo", 3 },
			{ "terza", 3 },
			{ "quarto", 4 },
			{ "trimestre", 4 },
			{ "quinto", 5 },
			{ "quinta", 5 },
			{ "sesto", 6 },
			{ "settimo", 7 },
			{ "settesimo", 7 },
			{ "ottavo", 8 },
			{ "nono", 9 },
			{ "nona", 9 },
			{ "decimo", 10 },
			{ "undicesimo", 11 },
			{ "dodicesimo", 12 },
			{ "tredicesimo", 13 },
			{ "quattordicesimo", 14 },
			{ "quindicesimo", 15 },
			{ "sedicesimo", 16 },
			{ "diciassettesimo", 17 },
			{ "diciottesimo", 18 },
			{ "diciannovesimo", 19 },
			{ "ventesimo", 20 },
			{ "trentesimo", 30 },
			{ "quarantesimo", 40 },
			{ "cinquantesimo", 50 },
			{ "sessantesimo", 60 },
			{ "settantesimo", 70 },
			{ "ottantesimo", 80 },
			{ "novantesimo", 90 },
			{ "centesimo", 100 },
			{ "duecentisimo", 200 },
			{ "trecentisimo", 300 },
			{ "quattrocentesimo", 400 },
			{ "cinquecentesimo", 500 },
			{ "seicentesimo", 600 },
			{ "settecentesimo", 700 },
			{ "ottocentesimo", 800 },
			{ "novecentesimo", 900 },
			{ "millesimo", 1000 },
			{ "milionesimo", 1000000 },
			{ "bilionesimo", 1000000000 },
			{ "miliardesimo", 1000000000000 },
			{ "primi", 1 },
			{ "terzi", 3 },
			{ "quarti", 4 },
			{ "quinti", 5 },
			{ "sesti", 6 },
			{ "settimi", 7 },
			{ "ottavi", 8 },
			{ "noni", 9 },
			{ "decimi", 10 },
			{ "undicesimi", 11 },
			{ "dodicesimi", 12 },
			{ "tredicesime", 13 },
			{ "quattordicesima", 14 },
			{ "quindicesima", 15 },
			{ "sedicesimi", 16 },
			{ "sedicesima", 16 },
			{ "diciassettesimi", 17 },
			{ "diciassettesima", 17 },
			{ "diciottesima", 18 },
			{ "diciottesimi", 18 },
			{ "diciannovesimi", 19 },
			{ "diciannovesima", 19 },
			{ "ventesima", 20 },
			{ "ventesimi", 20 },
			{ "trentesima", 30 },
			{ "trentesimi", 30 },
			{ "quarantesima", 40 },
			{ "quarantesimi", 40 },
			{ "cinquantesima", 50 },
			{ "cinquantesimi", 50 },
			{ "sessantesima", 60 },
			{ "sessantesimi", 60 },
			{ "settantesima", 70 },
			{ "settantesimi", 70 },
			{ "ottantesima", 80 },
			{ "ottantesimi", 80 },
			{ "novantesimi", 90 },
			{ "novantesima", 90 },
			{ "centesima", 100 },
			{ "millesima", 1000 },
			{ "millesimi", 1000 },
			{ "milionesima", 1000000 },
			{ "milionesimi", 1000000 },
			{ "bilionesima", 1000000000 },
			{ "bilionesimi", 1000000000 },
			{ "miliardesimi", 1000000000000 },
			{ "miliardesima", 1000000000000 }
		};
		public static readonly Dictionary<string, long> PrefixCardinalDictionary = new Dictionary<string, long>
		{
			{ "due", 2 },
			{ "tre", 3 },
			{ "quattro", 4 },
			{ "cinque", 5 },
			{ "sei", 6 },
			{ "sette", 7 },
			{ "otto", 8 },
			{ "nove", 9 },
			{ "dieci", 10 },
			{ "undici", 11 },
			{ "dodici", 12 },
			{ "tredici", 13 },
			{ "quattordici", 14 },
			{ "quince", 15 },
			{ "sedici", 16 },
			{ "dieciséis", 16 },
			{ "diciassette", 17 },
			{ "diciotto", 18 },
			{ "diciannove", 19 },
			{ "venti", 20 },
			{ "ventino", 21 },
			{ "ventidue", 22 },
			{ "ventitre", 23 },
			{ "ventitré", 23 },
			{ "ventiquattro", 24 },
			{ "venticinque", 25 },
			{ "ventisei", 26 },
			{ "ventisette", 27 },
			{ "ventotto", 28 },
			{ "ventinove", 29 },
			{ "trenta", 30 },
			{ "quaranta", 40 },
			{ "cinquanta", 50 },
			{ "sessanta", 60 },
			{ "settanta", 70 },
			{ "ottanta", 80 },
			{ "novanta", 90 },
			{ "cento", 100 },
			{ "deucento", 200 },
			{ "trecento", 300 },
			{ "quattrocento", 400 },
			{ "cinquecento", 500 },
			{ "seicento", 600 },
			{ "settecento", 700 },
			{ "ottocento", 800 },
			{ "novecento", 900 }
		};
		public static readonly Dictionary<string, long> SufixOrdinalDictionary = new Dictionary<string, long>
		{
			{ "millesimo", 1000 },
			{ "milionesimo", 1000000 },
			{ "bilionesimo", 1000000000000 }
		};
		public static readonly Dictionary<string, long> RoundNumberMap = new Dictionary<string, long>
		{
			{ "cento", 100 },
			{ "centinaio", 100 },
			{ "mille", 1000 },
			{ "milione", 1000000 },
			{ "milioni", 1000000 },
			{ "miliardo", 1000000000 },
			{ "miliardi", 1000000000 },
			{ "bilione", 1000000000 },
			{ "trilioni di", 1000000000000 },
			{ "trilioni", 1000000000000 },
			{ "centesimo", 100 },
			{ "centesima", 100 },
			{ "millesimo", 1000 },
			{ "millesima", 1000 },
			{ "milionesimo", 1000000 },
			{ "milionesima", 1000000 },
			{ "bilionesimo", 1000000000 },
			{ "miliardesimo", 1000000000000 },
			{ "thousandths", 1000 },
			{ "millionths", 1000000 },
			{ "billionths", 1000000000 },
			{ "trillionths", 1000000000000 },
			{ "dozzina", 12 },
			{ "dozzine", 12 },
			{ "dozzina di", 12 },
			{ "decine", 12 },
			{ "k", 1000 },
			{ "m", 1000000 },
			{ "g", 1000000000 },
			{ "b", 1000000000 },
			{ "t", 1000000000000 }
		};
	}
}